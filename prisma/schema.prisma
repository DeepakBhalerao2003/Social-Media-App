generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @map("_id") // Removed @default(auto()) and @db.ObjectId
  username    String     @unique
  avatar      String?
  coverPic    String?
  fname       String?
  surname     String?
  description String?
  city        String?
  school      String?
  work        String?
  website     String?
  createdAt   DateTime   @default(now())
  posts       Post[]
  likes       Like[]
  comments    Comments[]
  followers   Follower[] @relation("UserFollowers")
  followings  Follower[] @relation("UserFollowings")
  followRequestsSent FollowRequest[] @relation("FollowRequestSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestReceived")
  blocks      Block[]    @relation("BlockSent")
  blockedBy   Block[]    @relation("BlockReceived")
  stories     Story[]
}

model Post {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  img       String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  likes     Like[]
  comments  Comments[]
}

model Comments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  likes     Like[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?

  comments   Comments? @relation(fields: [commentsId], references: [id], onDelete: Cascade)
  commentsId String?
}

model Follower {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  follower User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  following User @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model FollowRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sender User @relation("FollowRequestSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String
  receiver User @relation("FollowRequestReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@unique([senderId, receiverId])
}

model Block {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  blocker User @relation("BlockSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked User @relation("BlockReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId])
}

model Story {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime   @default(now())
  expiresAt  DateTime
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}
